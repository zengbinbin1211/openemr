"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./builder'),
    build = _require.build;

var _require2 = require('../util/util'),
    typeIsArray = _require2.typeIsArray;

var Expression = /*#__PURE__*/function () {
  function Expression(json) {
    _classCallCheck(this, Expression);

    if (json.operand != null) {
      var op = build(json.operand);

      if (typeIsArray(json.operand)) {
        this.args = op;
      } else {
        this.arg = op;
      }
    }

    if (json.localId != null) {
      this.localId = json.localId;
    }
  }

  _createClass(Expression, [{
    key: "execute",
    value: function execute(ctx) {
      if (this.localId != null) {
        // Store the localId and result on the root context of this library
        var execValue = this.exec(ctx);
        ctx.rootContext().setLocalIdWithResult(this.localId, execValue);
        return execValue;
      } else {
        return this.exec(ctx);
      }
    }
  }, {
    key: "exec",
    value: function exec(ctx) {
      return this;
    }
  }, {
    key: "execArgs",
    value: function execArgs(ctx) {
      switch (false) {
        case this.args == null:
          return this.args.map(function (arg) {
            return arg.execute(ctx);
          });

        case this.arg == null:
          return this.arg.execute(ctx);

        default:
          return null;
      }
    }
  }]);

  return Expression;
}();

var UnimplementedExpression = /*#__PURE__*/function (_Expression) {
  _inherits(UnimplementedExpression, _Expression);

  var _super = _createSuper(UnimplementedExpression);

  function UnimplementedExpression(json) {
    var _this;

    _classCallCheck(this, UnimplementedExpression);

    _this = _super.call(this, json);
    _this.json = json;
    return _this;
  }

  _createClass(UnimplementedExpression, [{
    key: "exec",
    value: function exec(ctx) {
      throw new Error("Unimplemented Expression: ".concat(this.json.type));
    }
  }]);

  return UnimplementedExpression;
}(Expression);

module.exports = {
  Expression: Expression,
  UnimplementedExpression: UnimplementedExpression
};