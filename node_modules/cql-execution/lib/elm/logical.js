"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('./expression'),
    Expression = _require.Expression;

var _require2 = require('../datatypes/datatypes'),
    ThreeValuedLogic = _require2.ThreeValuedLogic;

var And = /*#__PURE__*/function (_Expression) {
  _inherits(And, _Expression);

  var _super = _createSuper(And);

  function And(json) {
    _classCallCheck(this, And);

    return _super.call(this, json);
  }

  _createClass(And, [{
    key: "exec",
    value: function exec(ctx) {
      return ThreeValuedLogic.and.apply(ThreeValuedLogic, _toConsumableArray(this.execArgs(ctx)));
    }
  }]);

  return And;
}(Expression);

var Or = /*#__PURE__*/function (_Expression2) {
  _inherits(Or, _Expression2);

  var _super2 = _createSuper(Or);

  function Or(json) {
    _classCallCheck(this, Or);

    return _super2.call(this, json);
  }

  _createClass(Or, [{
    key: "exec",
    value: function exec(ctx) {
      return ThreeValuedLogic.or.apply(ThreeValuedLogic, _toConsumableArray(this.execArgs(ctx)));
    }
  }]);

  return Or;
}(Expression);

var Not = /*#__PURE__*/function (_Expression3) {
  _inherits(Not, _Expression3);

  var _super3 = _createSuper(Not);

  function Not(json) {
    _classCallCheck(this, Not);

    return _super3.call(this, json);
  }

  _createClass(Not, [{
    key: "exec",
    value: function exec(ctx) {
      return ThreeValuedLogic.not(this.execArgs(ctx));
    }
  }]);

  return Not;
}(Expression);

var Xor = /*#__PURE__*/function (_Expression4) {
  _inherits(Xor, _Expression4);

  var _super4 = _createSuper(Xor);

  function Xor(json) {
    _classCallCheck(this, Xor);

    return _super4.call(this, json);
  }

  _createClass(Xor, [{
    key: "exec",
    value: function exec(ctx) {
      return ThreeValuedLogic.xor.apply(ThreeValuedLogic, _toConsumableArray(this.execArgs(ctx)));
    }
  }]);

  return Xor;
}(Expression);

var IsTrue = /*#__PURE__*/function (_Expression5) {
  _inherits(IsTrue, _Expression5);

  var _super5 = _createSuper(IsTrue);

  function IsTrue(json) {
    _classCallCheck(this, IsTrue);

    return _super5.call(this, json);
  }

  _createClass(IsTrue, [{
    key: "exec",
    value: function exec(ctx) {
      return true === this.execArgs(ctx);
    }
  }]);

  return IsTrue;
}(Expression);

var IsFalse = /*#__PURE__*/function (_Expression6) {
  _inherits(IsFalse, _Expression6);

  var _super6 = _createSuper(IsFalse);

  function IsFalse(json) {
    _classCallCheck(this, IsFalse);

    return _super6.call(this, json);
  }

  _createClass(IsFalse, [{
    key: "exec",
    value: function exec(ctx) {
      return false === this.execArgs(ctx);
    }
  }]);

  return IsFalse;
}(Expression);

module.exports = {
  And: And,
  IsFalse: IsFalse,
  IsTrue: IsTrue,
  Not: Not,
  Or: Or,
  Xor: Xor
};