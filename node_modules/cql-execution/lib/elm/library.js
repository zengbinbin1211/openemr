"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Library = /*#__PURE__*/function () {
  function Library(json, libraryManager) {
    _classCallCheck(this, Library);

    this.source = json; // usings

    var usingDefs = json.library.usings && json.library.usings.def || [];
    this.usings = usingDefs.filter(function (u) {
      return u.localIdentifier !== 'System';
    }).map(function (u) {
      return {
        name: u.localIdentifier,
        version: u.version
      };
    }); // parameters

    var paramDefs = json.library.parameters && json.library.parameters.def || [];
    this.parameters = {};

    var _iterator = _createForOfIteratorHelper(paramDefs),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var param = _step.value;
        this.parameters[param.name] = new ParameterDef(param);
      } // code systems

    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var csDefs = json.library.codeSystems && json.library.codeSystems.def || [];
    this.codesystems = {};

    var _iterator2 = _createForOfIteratorHelper(csDefs),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var codesystem = _step2.value;
        this.codesystems[codesystem.name] = new CodeSystemDef(codesystem);
      } // value sets

    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    var vsDefs = json.library.valueSets && json.library.valueSets.def || [];
    this.valuesets = {};

    var _iterator3 = _createForOfIteratorHelper(vsDefs),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var valueset = _step3.value;
        this.valuesets[valueset.name] = new ValueSetDef(valueset);
      } // codes

    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    var codeDefs = json.library.codes && json.library.codes.def || [];
    this.codes = {};

    var _iterator4 = _createForOfIteratorHelper(codeDefs),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var code = _step4.value;
        this.codes[code.name] = new CodeDef(code);
      } // concepts

    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }

    var conceptDefs = json.library.concepts && json.library.concepts.def || [];
    this.concepts = {};

    var _iterator5 = _createForOfIteratorHelper(conceptDefs),
        _step5;

    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var concept = _step5.value;
        this.concepts[concept.name] = new ConceptDef(concept);
      } // expressions

    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }

    var exprDefs = json.library.statements && json.library.statements.def || [];
    this.expressions = {};
    this.functions = {};

    var _iterator6 = _createForOfIteratorHelper(exprDefs),
        _step6;

    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var expr = _step6.value;

        if (expr.type === 'FunctionDef') {
          if (!this.functions[expr.name]) {
            this.functions[expr.name] = [];
          }

          this.functions[expr.name].push(new FunctionDef(expr));
        } else {
          this.expressions[expr.name] = new ExpressionDef(expr);
        }
      } // includes

    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }

    var inclDefs = json.library.includes && json.library.includes.def || [];
    this.includes = {};

    var _iterator7 = _createForOfIteratorHelper(inclDefs),
        _step7;

    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var incl = _step7.value;

        if (libraryManager) {
          this.includes[incl.localIdentifier] = libraryManager.resolve(incl.path, incl.version);
        }
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }
  }

  _createClass(Library, [{
    key: "getFunction",
    value: function getFunction(identifier) {
      return this.functions[identifier];
    }
  }, {
    key: "get",
    value: function get(identifier) {
      return this.expressions[identifier] || this.includes[identifier] || this.getFunction(identifier);
    }
  }, {
    key: "getValueSet",
    value: function getValueSet(identifier, libraryName) {
      if (this.valuesets[identifier] != null) {
        return this.valuesets[identifier];
      }

      return this.includes[libraryName] != null ? this.includes[libraryName].valuesets[identifier] : undefined;
    }
  }, {
    key: "getCodeSystem",
    value: function getCodeSystem(identifier) {
      return this.codesystems[identifier];
    }
  }, {
    key: "getCode",
    value: function getCode(identifier) {
      return this.codes[identifier];
    }
  }, {
    key: "getConcept",
    value: function getConcept(identifier) {
      return this.concepts[identifier];
    }
  }, {
    key: "getParameter",
    value: function getParameter(name) {
      return this.parameters[name];
    }
  }]);

  return Library;
}(); // These requires are at the end of the file because having them first in the
// file creates errors due to the order that the libraries are loaded.


var _require = require('./expressions'),
    ExpressionDef = _require.ExpressionDef,
    FunctionDef = _require.FunctionDef,
    ParameterDef = _require.ParameterDef,
    ValueSetDef = _require.ValueSetDef,
    CodeSystemDef = _require.CodeSystemDef,
    CodeDef = _require.CodeDef,
    ConceptDef = _require.ConceptDef;

module.exports = {
  Library: Library
};